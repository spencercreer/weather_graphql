{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/CityInput/CityInput.js","components/ErrorAlert/ErrorAlert.js","components/SearchHistory/SearchHistory.js","components/WeatherCard/WeatherCard.js","components/DayCard/DayCard.js","components/ForecastCard/ForecastCard.js","components/WeatherDashboard/WeatherDashboard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Footer","href","target","rel","style","fontSize","color","CityInput","handleSearch","useState","city","setCity","handleSubmit","InputGroup","FormControl","type","id","placeholder","value","onChange","event","onKeyUp","keyCode","onBlur","Button","variant","onClick","ErrorAlert","error","Alert","SearchHistory","history","handleOnClick","map","i","Title","Card","Body","Text","WEATHER_QUERY","gql","LOCATION_QUERY","WeatherCard","convertTemp","tempUnit","coords","handleError","useQuery","variables","lat","lon","weatherLoading","loading","weatherData","data","weatherError","locationLoading","locationData","locationError","country","location","results","locations","adminArea1","adminArea3","adminArea5","console","log","weather","current","humidity","temp","uvi","wind_deg","wind_speed","timezone_offset","iconLink","icon","windDirStyle","transform","display","uviAlert","position","Spinner","animation","top","opacity","height","moment","utcOffset","format","Image","src","width","rounded","String","fromCharCode","marginRight","DayCard","index","forecast","locationTime","windDir","styles","Col","md","add","min","max","defaultProps","FORECAST_QUERY","ForecastCard","fiveDayForecast","daily","slice","Row","COORDS_QUERY","WeatherDashboard","setCoords","searchError","setSearchError","searchHistory","setSearchHistory","setTempUnit","useEffect","mounted","navigator","geolocation","getCurrentPosition","latitude","longitude","citySearches","JSON","parse","localStorage","getItem","storeCitySearch","find","x","unshift","length","pop","setItem","stringify","handleUnitChange","tempK","convertedTemp","toFixed","coordinates","cityCoords","coord","Container","fluid","Form","Switch","label","sm","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2808eb9c.chunk.js","sourcesContent":["export default function Header() {\r\n    return (\r\n        <header>\r\n            <h1 className=\"text-center bg-primary text-light\">Weather GraphQL</h1>\r\n        </header>\r\n    )\r\n}\r\n","export default function Footer() {\r\n    return (\r\n        <footer className=\"footer mt-auto\">\r\n            <div className=\"container py-3\">\r\n                <span className=\"text-muted\">Coded by Spencer Creer using OpenWeather API\r\n                    <a className=\"text-dark link-text mx-2\" href=\"https://www.linkedin.com/in/spencer-creer-023246109/\" target=\"_blank\" rel=\"noreferrer\" style={{fontSize: \"25px\", color: 'black'}}><i className=\"fa fa-linkedin-square link-in\" ></i></a>\r\n                    <a className=\"text-dark link-text mx-2 pt-3\" href=\"https://github.com/spencercreer\" target=\"_blank\" rel=\"noreferrer\"><i className=\"fa fa-github link-git\" style={{fontSize: \"25px\"}}></i></a>\r\n                </span>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n","import { useState } from 'react'\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function CityInput({ handleSearch }) {\r\n    const [city, setCity] = useState('')\r\n\r\n    const handleOnChange = event => {\r\n        setCity(event.target.value)\r\n    }\r\n    \r\n    const handleKeyUp = event => {\r\n        if (event.keyCode === 13) {\r\n            handleSearch(city)\r\n            setCity('')\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        handleSearch(city)\r\n        setCity('')\r\n    }\r\n\r\n    return (\r\n        <InputGroup className='mb-3'>\r\n            <FormControl\r\n                type='text'\r\n                id='city-input'\r\n                placeholder='Search City'\r\n                value={city}\r\n                onChange={handleOnChange}\r\n                onKeyUp={handleKeyUp}\r\n                onBlur={handleSubmit}\r\n            />\r\n            <Button\r\n                id='search-btn'\r\n                className='fas fa-search'\r\n                variant='outline-primary'\r\n                onClick={handleSubmit}\r\n            />\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nCityInput.propTypes = {\r\n    city: PropTypes.string,\r\n    handleOnChange: PropTypes.func,\r\n    handleSubmit: PropTypes.func,\r\n}","import { Alert } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function ErrorAlert({city, error}) {\r\n    return (\r\n        <>\r\n            {error && <Alert variant='danger'><strong>{city}</strong> not found</Alert>}\r\n        </>\r\n    )\r\n}\r\n\r\nErrorAlert.propTypes = {\r\n    city: PropTypes.string,\r\n    error: PropTypes.bool,\r\n}\r\n\r\n","import PropTypes from 'prop-types'\r\n\r\nexport default function SearchHistory({ history, handleSearch }) {\r\n\r\n    const handleOnClick = event => {\r\n        handleSearch(event.target.value)\r\n    }\r\n    return (\r\n        <div className='list-group cityList pl-0'>\r\n            {history.map((city, i) => <button className='list-group-item list-group-item-action pl-0' key={i} onClick={handleOnClick} value={city} >{city}</button>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nSearchHistory.propTypes = {\r\n    history: PropTypes.array,\r\n    handleOnClick: PropTypes.func,\r\n}","import { Fragment } from 'react'\r\nimport { Card, Image, Alert, Spinner } from 'react-bootstrap'\r\nimport moment from 'moment'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client';\r\n\r\nconst { Title, Body, Text } = Card\r\n\r\nconst WEATHER_QUERY = gql`\r\n  query WeatherQuery($lat: Float!, $lon: Float!) {\r\n    weather(lat: $lat, lon: $lon){\r\n      timezone_offset\r\n      current {\r\n        temp\r\n        humidity\r\n        uvi\r\n        wind_speed\r\n        wind_deg\r\n        weather {\r\n          icon\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nconst LOCATION_QUERY = gql`\r\n  query LocationQuery($lat: Float!, $lon: Float!) {\r\n    location(lat: $lat, lon: $lon) {\r\n      results {\r\n        locations {\r\n          adminArea1\r\n          adminArea3\r\n          adminArea5\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function WeatherCard({ convertTemp, tempUnit, coords, handleError }) {\r\n\r\n  const { loading: weatherLoading, data: weatherData, error: weatherError } = useQuery(WEATHER_QUERY, {\r\n    variables: { lat: coords.lat, lon: coords.lon }\r\n  })\r\n\r\n  const { loading: locationLoading, data: locationData, error: locationError, } = useQuery(LOCATION_QUERY, {\r\n    variables: { lat: coords.lat, lon: coords.lon }\r\n  })\r\n  \r\n  if (weatherError || locationError) {\r\n    handleError()\r\n    return null\r\n  }\r\n\r\n  if (locationData) {\r\n    var country = locationData.location.results[0].locations[0].adminArea1\r\n    var state = locationData.location.results[0].locations[0].adminArea3\r\n    var city = locationData.location.results[0].locations[0].adminArea5\r\n  }\r\n\r\n  if (weatherData) {\r\n    console.log(weatherData)\r\n    var { current: { humidity, temp, uvi, weather, wind_deg, wind_speed }, timezone_offset } = weatherData.weather\r\n    var iconLink = weather[0].icon ? `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png` : 'http://openweathermap.org/img/wn/03n@2x.png'\r\n    var windDir = wind_deg - 43 || -43\r\n    var windDirStyle = {\r\n      transform: `rotate(${windDir}deg)`,\r\n      display: 'inline-block',\r\n      fontSize: '10px'\r\n    };\r\n    var uviAlert = ''\r\n    if (uvi <= 2)\r\n      uviAlert = 'success'\r\n    else if (uvi > 2 && uvi <= 7)\r\n      uviAlert = 'warning'\r\n    else\r\n      uviAlert = 'danger'\r\n  }\r\n\r\n  if (weatherLoading || locationLoading) {\r\n    return (\r\n      <div style={{ position: 'relative' }}>\r\n        <Spinner animation=\"border\" variant=\"primary\" className=\"m-3\" style={{ position: 'absolute', top: '20px' }} />\r\n        <Card style={{ opacity: '0.5', height: '305px' }} className='mb-2'>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card style={{ height: '305px' }} className='mb-2'>\r\n      <Body>\r\n        <Text>{moment().utcOffset(timezone_offset / 60).format('LLLL')}</Text>\r\n        <Title>{city}, {country}\r\n          <Image src={iconLink} style={{ display: 'inline-block', height: '60px', width: '60px' }} rounded />\r\n        </Title>\r\n        <Text>{convertTemp(temp) + String.fromCharCode(176)} {tempUnit}</Text>\r\n\r\n        <Text>Humidity: {humidity}%</Text>\r\n        <Text><span style={{ marginRight: '3px' }}>Wind Speed: {wind_speed}mph</span><span style={windDirStyle}><i className=\"fas fa-location-arrow\"></i></span></Text>\r\n        <Alert className='p-0' variant={uviAlert}>UV Index: {uvi}</Alert>\r\n      </Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nWeatherCard.propTypes = {\r\n  convertTemp: PropTypes.func,\r\n  tempUnit: PropTypes.string,\r\n  coords: PropTypes.object,\r\n  handleError: PropTypes.func,\r\n}","import { Col, Card, Image, Alert } from 'react-bootstrap'\r\nimport PropTypes from 'prop-types'\r\nimport moment from 'moment'\r\n\r\nconst { Title, Body, Text } = Card\r\n\r\nexport default function DayCard({ index, forecast, locationTime, convertTemp, tempUnit, loading }) {\r\n\r\n    // if (loading) {\r\n    //     return (\r\n    //         <Col md className='px-1'>\r\n    //             <Card>\r\n    //                 <div style={{ height: '311px' }}>\r\n    //                 </div>\r\n    //             </Card>\r\n    //         </Col>\r\n    //     )\r\n    // }\r\n\r\n    const windDir = forecast?.wind_deg - 43 || -43\r\n    const styles = {\r\n        transform: `rotate(${windDir}deg)`,\r\n        display: 'inline-block',\r\n        fontSize: '10px',\r\n    };\r\n\r\n    const iconLink = forecast?.weather[0]?.icon ? `http://openweathermap.org/img/wn/${forecast.weather[0].icon}@2x.png` : 'http://openweathermap.org/img/wn/03n@2x.png'\r\n\r\n    let uviAlert = ''\r\n    const uvi = forecast?.uvi || 0\r\n    if (uvi <= 2)\r\n        uviAlert = 'success'\r\n    else if (uvi > 2 && uvi <= 7)\r\n        uviAlert = 'warning'\r\n    else\r\n        uviAlert = 'danger'\r\n\r\n    return (\r\n        <Col md className='px-1'>\r\n            <Card>\r\n                <Body>\r\n                    <Title>{moment(locationTime).add(index, 'days').format('dddd')}</Title>\r\n                    <Text>{convertTemp(forecast?.temp.min)}/{convertTemp(forecast?.temp.max) + String.fromCharCode(176)} {tempUnit}\r\n                        <Image src={iconLink} style={{ display: 'inline-block', height: '35px', width: '35px' }} rounded />\r\n                    </Text>\r\n                    <Text>Humidity: {forecast?.humidity}%</Text>\r\n                    <Text>Wind: {forecast?.wind_speed}mph  <span style={styles}><i className=\"fas fa-location-arrow\"></i></span>\r\n                    </Text>\r\n                    <Alert className='p-0' variant={uviAlert}>UV Index: {uvi}</Alert>\r\n                </Body>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\nDayCard.defaultProps = {\r\n    forecast: {},\r\n}\r\n\r\nDayCard.propTypes = {\r\n    index: PropTypes.number,\r\n    forecast: PropTypes.object,\r\n    locationTime: PropTypes.object,\r\n    convertTemp: PropTypes.func,\r\n    tempUnit: PropTypes.string,\r\n}","import { Row, Spinner } from 'react-bootstrap'\r\nimport DayCard from '../DayCard/DayCard'\r\nimport moment from 'moment'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport gql from 'graphql-tag'\r\nimport { useQuery } from '@apollo/client'\r\n\r\nconst FORECAST_QUERY = gql`\r\n    query ForecastQuery($lat: Float!, $lon: Float!) {\r\n        weather(lat: $lat, lon: $lon) {\r\n        timezone_offset\r\n        daily {\r\n            temp {\r\n                min\r\n                max\r\n            }\r\n            humidity\r\n            uvi\r\n            wind_speed\r\n            wind_deg\r\n            weather {\r\n                icon\r\n            }\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport default function ForecastCard({ convertTemp, tempUnit, coords, handleError }) {\r\n\r\n    const { loading, error, data } = useQuery(FORECAST_QUERY, {\r\n        variables: { lat: coords.lat, lon: coords.lon }\r\n    })\r\n\r\n    // if (error) {\r\n    //     handleError()\r\n    //     return null\r\n    // }\r\n\r\n    let fiveDayForecast = []\r\n\r\n    if (data) {\r\n        console.log(data)\r\n        var { daily, timezone_offset } = data.weather\r\n\r\n        fiveDayForecast = daily.slice(0, 5)\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <Spinner animation=\"border\" variant=\"primary\" className=\"m-3\" style={{ opacity: '0.5' }} />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {fiveDayForecast.map((forecast, i) => (\r\n                <DayCard\r\n                    key={i}\r\n                    index={i + 1}\r\n                    forecast={forecast}\r\n                    locationTime={moment().utcOffset(timezone_offset / 60)}\r\n                    convertTemp={convertTemp}\r\n                    tempUnit={tempUnit}\r\n                    loading={loading}\r\n                />\r\n            ))}\r\n        </Row>\r\n    )\r\n}\r\n\r\nForecastCard.propTypes = {\r\n    coords: PropTypes.object,\r\n    convertTemp: PropTypes.func,\r\n    tempUnit: PropTypes.string,\r\n    handleError: PropTypes.func,\r\n}","import { useState, useEffect } from 'react'\r\nimport CityInput from '../CityInput/CityInput'\r\nimport ErrorAlert from '../ErrorAlert/ErrorAlert'\r\nimport SearchHistory from '../SearchHistory/SearchHistory'\r\nimport WeatherCard from '../WeatherCard/WeatherCard'\r\nimport ForecastCard from '../ForecastCard/ForecastCard'\r\nimport { Container, Row, Col, Form, Spinner } from 'react-bootstrap'\r\n\r\nimport {\r\n    useQuery\r\n} from '@apollo/client';\r\nimport gql from 'graphql-tag'\r\n\r\nconst COORDS_QUERY = gql`\r\n    query CityCoordsQuery($city: String!) {\r\n        cityCoords(city: $city) {\r\n            coord {\r\n                lat\r\n                lon\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst WeatherDashboard = () => {\r\n\r\n    const [coords, setCoords] = useState({ lat: 51.5, lon: 0.1276 })\r\n    const [city, setCity] = useState('Phoenix')\r\n    const [searchError, setSearchError] = useState(false)\r\n    const [searchHistory, setSearchHistory] = useState([])\r\n    const [tempUnit, setTempUnit] = useState('F')\r\n\r\n    useEffect(() => {\r\n        let mounted = true\r\n\r\n        if (mounted) {\r\n            //get users geolocation or set coords to Phoenix\r\n            if (navigator.geolocation)\r\n                navigator.geolocation.getCurrentPosition((position) => {\r\n                    setCoords({ lat: position.coords.latitude, lon: position.coords.longitude })\r\n                })\r\n            else\r\n                setCoords({ lat: 51.5, lon: 0.1276 })\r\n\r\n            //local storage search history\r\n            const citySearches = JSON.parse(localStorage.getItem('searchHistory')) || []\r\n            setSearchHistory(citySearches)\r\n        }\r\n\r\n        return () => mounted = false\r\n    }, [])\r\n\r\n\r\n\r\n    const handleSearch = (city) => {\r\n        setCity(city)\r\n        storeCitySearch(city)\r\n    }\r\n\r\n    const handleError = () => setSearchError(true)\r\n\r\n    const storeCitySearch = (city) => {\r\n        //check search history to ensure it is not a duplicate\r\n        let found = searchHistory.find(x => x === city)\r\n        if (!found) {\r\n            //store city search in local storage\r\n            searchHistory.unshift(city)\r\n            if (searchHistory.length > 6) {\r\n                searchHistory.pop()\r\n            }\r\n            // setSearchHistory(searchHistory)\r\n            localStorage.setItem('searchHistory', JSON.stringify(searchHistory))\r\n        }\r\n    }\r\n\r\n    const handleUnitChange = () => {\r\n        const newTempUnit = tempUnit === 'F' ? 'C' : 'F'\r\n        setTempUnit(newTempUnit)\r\n    }\r\n\r\n    const convertTemp = (tempK) => {\r\n        let convertedTemp\r\n\r\n        if (tempUnit === 'F') {\r\n            convertedTemp = (tempK - 273.15) * 1.80 + 32;\r\n        } else if (tempUnit === 'C') {\r\n            convertedTemp = (tempK - 273.15)\r\n        }\r\n\r\n        return convertedTemp.toFixed()\r\n    }\r\n\r\n    const { data, loading } = useQuery(COORDS_QUERY, {\r\n        variables: { city: city }\r\n    })\r\n\r\n    if (loading) return <Spinner animation=\"border\" variant=\"primary\" className=\"m-3\" style={{ opacity: '0.5' }} />\r\n\r\n    if (data) {\r\n        const coordinates = { lat: data.cityCoords.coord.lat, lon: data.cityCoords.coord.lon }\r\n        return (\r\n            <Container className='px-5' fluid>\r\n                <Form>\r\n                    <Form.Switch\r\n                        label={`${String.fromCharCode(176)}${tempUnit}`}\r\n                        onChange={handleUnitChange}\r\n                    />\r\n                </Form>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        <CityInput\r\n                            handleSearch={handleSearch}\r\n                        />\r\n                        <ErrorAlert\r\n                            // location={location}\r\n                            error={searchError}\r\n                        />\r\n                        <SearchHistory\r\n                            history={searchHistory}\r\n                            handleSearch={handleSearch}\r\n                        />\r\n                    </Col>\r\n                    <Col sm={8} className='px-1'>\r\n                        <WeatherCard\r\n                            coords={coordinates}\r\n                            convertTemp={convertTemp}\r\n                            tempUnit={tempUnit}\r\n                            handleError={handleError}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <ForecastCard\r\n                    coords={coordinates}\r\n                    convertTemp={convertTemp}\r\n                    tempUnit={tempUnit}\r\n                    handleError={handleError}\r\n\r\n                />\r\n            </Container>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <Container className='px-5' fluid>\r\n                <Form>\r\n                    <Form.Switch\r\n                        label={`${String.fromCharCode(176)}${tempUnit}`}\r\n                        onChange={handleUnitChange}\r\n                    />\r\n                </Form>\r\n                <Row>\r\n                    <Col sm={4}>\r\n                        <CityInput\r\n                            handleSearch={handleSearch}\r\n                        />\r\n                        <ErrorAlert\r\n                            // location={location}\r\n                            error={searchError}\r\n                        />\r\n                        <SearchHistory\r\n                            history={searchHistory}\r\n                            handleSearch={handleSearch}\r\n                        />\r\n                    </Col>\r\n                    <Col sm={8} className='px-1'>\r\n                        <WeatherCard\r\n                            coords={coords}\r\n                            convertTemp={convertTemp}\r\n                            tempUnit={tempUnit}\r\n                            handleError={handleError}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <ForecastCard\r\n                    coords={coords}\r\n                    convertTemp={convertTemp}\r\n                    tempUnit={tempUnit}\r\n                    handleError={handleError}\r\n\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default WeatherDashboard;\r\n","import Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\nimport WeatherDashboard from './components/WeatherDashboard/WeatherDashboard'\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:5000/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <Header />\n      <WeatherDashboard />\n      <Footer />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}